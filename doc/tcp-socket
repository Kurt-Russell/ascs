
namespace ascs { namespace tcp {

tcp套接字类，实现tcp数据的收发
template <typename Socket, typename Packer, typename Unpacker,
	template<typename> class InQueue, template<typename> class InContainer, template<typename> class OutQueue, template<typename> class OutContainer>
class socket_base : public socket<Socket, Packer, typename Packer::msg_type, typename Unpacker::msg_type, InQueue, InContainer, OutQueue, OutContainer>
{
public:
	typedef typename Packer::msg_type in_msg_type;
	typedef typename Packer::msg_ctype in_msg_ctype;
	typedef typename Unpacker::msg_type out_msg_type;
	typedef typename Unpacker::msg_ctype out_msg_ctype;

private:
	typedef socket<Socket, Packer, in_msg_type, out_msg_type, InQueue, InContainer, OutQueue, OutContainer> super;

protected:
	enum link_status {CONNECTED, FORCE_SHUTTING_DOWN, GRACEFUL_SHUTTING_DOWN, BROKEN};

	socket_base(asio::io_context& io_context_);
	template<typename Arg> socket_base(asio::io_context& io_context_, Arg& arg);
ssl使用。

	void first_init();
构造时调用，仅仅是为了节省代码量而已，因为我们有两个构造函数都将调用它。

public:
	static const typename super::tid TIMER_BEGIN = super::TIMER_END;
	static const typename super::tid TIMER_ASYNC_SHUTDOWN = TIMER_BEGIN;
	static const typename super::tid TIMER_END = TIMER_BEGIN + 5;

	virtual bool obsoleted();
在调用父类同名函数的基础上，增加了对是否正在关闭连接的判断，如果是，则返回假。

	virtual bool is_ready();
是否可以数据收发。

	virtual void send_heartbeat();
发送一个心跳包。

	virtual void reset();
重置所有并调用同类同名函数，如果你在构造函数里面做了额外的配置工作，那么那些配置工作也需要在这里做，因为在对象
被重用时，不会再调用构造函数，而是这个reset函数。

	bool is_broken() const;
连接是否已经断开。
	bool is_connected() const;
连接是否已经建立。
	bool is_shutting_down() const;
是否正在优雅关闭套接字，此时不再发送消息（如果发送则会出错，因为已经关闭了自己的数据发送通道），但继续接收消息。

	void show_info(const char* head, const char* tail) const;
	void show_info(const char* head, const char* tail, const asio::error_code& ec) const;
	void show_status() const;

	std::shared_ptr<i_unpacker<out_msg_type>> unpacker();
	std::shared_ptr<const i_unpacker<out_msg_type>> unpacker() const;
#ifdef ASCS_PASSIVE_RECV
	void unpacker(const std::shared_ptr<i_unpacker<out_msg_type>>& _unpacker_) {unpacker_ = _unpacker_;}
获取／修改解包器。
注意，运行时修改解包器是非线程安全的，只能在如下几个地方修改，切记：
1. 构造函数；
2. 子类的reset函数；
3. on_msg（需要定义ASCS_SYNC_DISPATCH宏）；
4. 定义ASCS_PASSIVE_RECV宏，并在调用(sync_)recv_msg之前修改。
不支持多线程一是为了效率，二是这个功能用得很少，三是可以通过在unpacker里面加标志位来达到同步的目的。

	virtual void recv_msg();
post一个异步调用到do_recv_msg()。
#endif

	bool send_msg(in_msg_type&& msg, bool can_overflow = false);
	bool send_msg(in_msg_type&& msg1, in_msg_type&& msg2, bool can_overflow = false);
	bool send_msg(typename Packer::container_type& msg_can, bool can_overflow = false);
	bool send_msg(const char* pstr, size_t len, bool can_overflow);
	template<typename Buffer> bool send_msg(const Buffer& buffer, bool can_overflow = fase);
	bool send_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = fase);
发送消息，前三个会为每一个消息打一个只包涵头的包，另一个直接move到库的缓存里面，减少一次内存拷贝，
第四、五个是helper函数，第五个调用第四个，第四个调用第六个。

	bool send_native_msg(in_msg_type&& msg, bool can_overflow = false);
	bool send_native_msg(in_msg_type&& msg1, in_msg_type&& msg2, bool can_overflow = false);
	bool send_native_msg(typename Packer::container_type& msg_can, bool can_overflow = false);
	bool send_native_msg(const char* pstr, size_t len, bool can_overflow);
	template<typename Buffer> bool send_native_msg(const Buffer& buffer, bool can_overflow = fase);
	bool send_native_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow = fase);
同上，只是以native为true调用i_packer::pack_msg接口，对于前三个，则干脆不调用i_packer::pack_msg函数。

	bool safe_send_msg(in_msg_type&& msg, bool can_overflow = false);
	bool safe_send_msg(in_msg_type&& msg1, in_msg_type&& msg2, bool can_overflow = false);
	bool safe_send_msg(typename Packer::container_type& msg_can, bool can_overflow = false);
	bool safe_send_msg(const char* pstr, size_t len, bool can_overflow);
	template<typename Buffer> bool safe_send_msg(const Buffer& buffer, bool can_overflow);
	bool safe_send_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow);
同send_msg，只是在消息发送缓存溢出的时候会等待直到缓存可用；如果is_ready()返回false或者io_context已经停止，则马上放弃等待返回失败。
safe系列函数，在on_msg和om_msg_handle里面调用时需要特别谨慎，因为它会阻塞service线程。

	bool safe_send_native_msg(in_msg_type&& msg, bool can_overflow = false);
	bool safe_send_native_msg(in_msg_type&& msg1, in_msg_type&& msg2, bool can_overflow = false);
	bool safe_send_native_msg(typename Packer::container_type& msg_can, bool can_overflow = false);
	bool safe_send_native_msg(const char* pstr, size_t len, bool can_overflow);
	template<typename Buffer> bool safe_send_native_msg(const Buffer& buffer, bool can_overflow);
	bool safe_send_native_msg(const char* const pstr[], const size_t len[], size_t num, bool can_overflow);
同上，只是以native为true调用i_packer::pack_msg接口，对于前三个，则干脆不调用i_packer::pack_msg函数。

以上所有函数都有对应的一个以sync_开头的版本，表示同步发送，同时带一个超时间隔，为0则永远等待直到发送成功。
注意超时返回不代表是错误，库用异步写来模拟同步写，超时返回之后，消息仍然可以在将来的某个时候被成功发送，此时on_msg_send仍然会
被调用（如果定义了相应的宏的话）。

protected:
	void force_shutdown();
	void graceful_shutdown(bool sync);
第一个直接直接调用shutdown()。
第二个函数优雅关闭套接字，所谓优雅关闭，就是先关闭自己的数据发送，然后接收完遗留数据之后，才完全关闭套接字。当sync为假时，
graceful_shutdown马上返回，优雅关闭将在后台继承进行，当回调到on_recv_error的时候，关闭结束（有可能优雅关闭成功，有可能超时
被强制关闭，超时由ASCS_GRACEFUL_SHUTDOWN_MAX_DURATION宏决定）。

virtual bool do_start();
记录连接建立时间，更新连接状态为已连接，调用on_connect()，调用父类同名函数。

	virtual void on_send_error(const error_code& ec);
发送失败时回调。

	virtual void on_close();
更新连接状态为断开状态，通知所有同步发送结束，调用父类同名函数。

	virtual void on_connect();
连接建立后回调。

	virtual void on_unpack_error() = 0;
解包出错时回调。

	virtual void on_async_shutdown_error() = 0;
异步关闭连接失败时回调。

private:
#ifndef ASCS_PASSIVE_RECV
	virtual void recv_msg();
post一个异步调用到do_recv_msg()。
#endif
	virtual void send_msg();
post一个异步调用到do_send_msg()。

	void shutdown();
做一些简单的标记之后，调用父类的close()。

	size_t completion_checker(const boost::system::error_code& ec, size_t bytes_transferred);
统计解包时间。

	void do_recv_msg();
调用async_read。

	void recv_handler(const error_code& ec, size_t bytes_transferred);
收到消息后由asio回调。

	bool do_send_msg(bool in_strand);
调用async_write。

	void send_handler(const error_code& ec, size_t bytes_transferred);
成功发送消息（写入底层套接字）后由asio回调。

	bool async_shutdown_handler(size_t loop_num);
异步关闭连接定时器的回调函数。

protected:
	volatile link_status status;

private:
	using super::stat;
	using super::packer_;
	using super::temp_msg_can;

	using super::send_msg_buffer;
	using super::sending;

#ifdef ASCS_PASSIVE_RECV
	using super::reading;
#endif

	std::shared_ptr<i_unpacker<out_msg_type>> unpacker_;
	typename super::in_containter_type last_send_msg;
	asio::io_context::strand strand;
};

}} //namespace
