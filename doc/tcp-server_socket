
namespace ascs { namespace tcp {

服务端套接字类
template<typename Packer, typename Unpacker, typename Server = i_server, typename Socket = asio::ip::tcp::socket,
	template<typename> class InQueue = ASCS_INPUT_QUEUE, template<typename> class InContainer = ASCS_INPUT_CONTAINER,
	template<typename> class OutQueue = ASCS_OUTPUT_QUEUE, template<typename> class OutContainer = ASCS_OUTPUT_CONTAINER>
class server_socket_base : public socket_base<Socket, Packer, Unpacker, InQueue, InContainer, OutQueue, OutContainer>,
	public std::enable_shared_from_this<server_socket_base<Packer, Unpacker, Server, Socket, InQueue, InContainer, OutQueue, OutContainer>>
{
public:
	server_socket_base(Server& server_);

	template<typename Arg> server_socket_base(Server& server_, Arg& arg);
ssl使用。

	virtual const char* type_name() const;
返回 "TCP (server endpoint)"。

	virtual int type_id() const;
返回 2。

	virtual void take_over(std::shared_ptr<st_server_socket_base> socket_ptr);
恢复对象socket_ptr到这个st_server_socket，所以你的用户数据最好是指针（智能指针），这样就不需要拷贝了，否则必须执行深拷贝。

	void disconnect();
直接调用force_shutdown。

	void force_shutdown();
强制关闭，记录重连接状态，输出一些提示信息，调用父类的shutdown。

	void graceful_shutdown(bool sync = true);
优雅关闭，记录重连接状态，输出一些提示信息，调用父类的graceful_shutdown函数。
在on_msg中，请以sync为false调用该函数，在其它所有service线程中，推荐也用sync为false调用该函数。

protected:
	Server& get_server();
	const Server& get_server() const;

	virtual void on_unpack_error();
解包错误，默认的行为是关闭连接，可以重写以自定义行为。

	virtual void on_recv_error(const error_code& ec);
连接断开，默认的行为是调用i_server::del_socket，可以重写以自定义行为。

	virtual void on_async_shutdown_error();
异步关闭出错时回调。

	virtual bool on_heartbeat_error();
心跳超时时回调。

private:
	Server& server;
用于操控server_base，server_base在创建server_socket_base的时候，会把自己的引用通过构造函数传入。
};

}} //namespace

