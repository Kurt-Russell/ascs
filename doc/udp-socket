
namespace ascs { namespace udp {

udp套接字类，实现udp数据的收发
template <typename Packer, typename Unpacker, typename Matrix = i_matrix, typename Socket = asio::ip::udp::socket,
	template<typename> class InQueue = ASCS_INPUT_QUEUE, template<typename> class InContainer = ASCS_INPUT_CONTAINER,
	template<typename> class OutQueue = ASCS_OUTPUT_QUEUE, template<typename> class OutContainer = ASCS_OUTPUT_CONTAINER>
class socket_base : public socket<Socket, Packer, Unpacker, udp_msg<typename Packer::msg_type>, udp_msg<typename Unpacker::msg_type>, InQueue, InContainer, OutQueue, OutContainer>
{
public:
	typedef udp_msg<typename Packer::msg_type> in_msg_type;
	typedef const in_msg_type in_msg_ctype;
	typedef udp_msg<typename Unpacker::msg_type> out_msg_type;
	typedef const out_msg_type out_msg_ctype;

public:
	socket_base(asio::io_context& io_context_);
	socket_base(Matrix& matrix_);

public:
	virtual bool is_ready();
是否可以数据收发。

	virtual void send_heartbeat();
发送一个心跳包。

	virtual const char* type_name() const;
返回 “UDP”。

	virtual int type_id() const;
返回 0。

	virtual void reset();
重置所有并调用同类同名函数，如果你在构造函数里面做了额外的配置工作，那么那些配置工作也需要在这里做，因为在对象
被重用时，不会再调用构造函数，而是这个reset函数。

	void set_local_addr(unsigned short port, const std::string& ip = std::string());
	const asio::ip::udp::endpoint& get_local_addr() const;
设置获取本端地址。

	bool set_peer_addr(unsigned short port, const std::string& ip = std::string());
	const asio::ip::udp::endpoint& get_peer_addr() const;
设置获取对端地址，发送消息时也可以指定对端地址，那时这里的对端地址将不使用。

	void disconnect();
	void force_close();
	void graceful_close();
调用clean_up，这三个函数功能完全一样，为了与tcp::socket_base在接口上保持一致才设计成三个。

	void show_info(const char* head, const char* tail) const;
	void show_status() const;

	std::shared_ptr<i_unpacker<typename Packer::msg_type>> unpacker();
	std::shared_ptr<const i_unpacker<typename Unpacker::msg_type>> unpacker() const;
#ifdef ASCS_PASSIVE_RECV
	void unpacker(const std::shared_ptr<i_unpacker<typename Unpacker::msg_type>>& _unpacker_) {unpacker_ = _unpacker_;}
获取／修改解包器。
注意，运行时修改解包器是非线程安全的，只能在如下几个地方修改，切记：
1. 构造函数；
2. 子类的reset函数（虚的那个）；
3. on_msg（需要定义ASCS_SYNC_DISPATCH宏）；
4. 定义ASCS_PASSIVE_RECV宏，并在调用(sync_)recv_msg之前修改。
不支持多线程一是为了效率，二是这个功能用得很少，三是可以通过在unpacker里面加标志位来达到同步的目的。

	virtual void recv_msg();
post一个异步调用到do_recv_msg()。
#endif

	template<typename Buffer> bool send_msg(const udp::endpoint& peer_addr, const Buffer& buffer, bool can_overflow);
	bool send_msg(const udp::endpoint& peer_addr, const char* pstr, size_t len, bool can_overflow);
	bool send_msg(const udp::endpoint& peer_addr, const char* const pstr[], const size_t len[], size_t num, bool can_overflow);
发送消息，前两个是helper函数，最后一个才是真正的发送消息（放入消息发送缓存）；第一个调用第二个，第二个调用第三个。

	template<typename Buffer> bool send_native_msg(const udp::endpoint& peer_addr, const Buffer& bufferr, bool can_overflow);
	bool send_native_msg(const udp::endpoint& peer_addr, const char* pstr, size_t len, bool can_overflow);
	bool send_native_msg(const udp::endpoint& peer_addr, const char* const pstr[], const size_t len[], size_t num, bool can_overflow);
同上，只是以native为true调用i_packer::pack_msg接口。

	template<typename Buffer> bool safe_send_msg(const udp::endpoint& peer_addr, const Buffer& buffer, bool can_overflow = false);
	bool safe_send_msg(const udp::endpoint& peer_addr, const char* pstr, size_t len, bool can_overflow = false);
	bool safe_send_msg(const udp::endpoint& peer_addr, const char* const pstr[], const size_t len[], size_t num, bool can_overflow);
同send_msg，只是在消息发送缓存溢出的时候会等待直到缓存可用；如果is_send_allowed返回false或者io_service已经停止，则马上放弃等待返回失败。
safe系列函数，在on_msg和om_msg_handle里面调用时需要特别谨慎，因为它会阻塞service线程。

	template<typename Buffer> bool safe_send_native_msg(const udp::endpoint& peer_addr, const Buffer& bufferr, bool can_overflow);
	bool safe_send_native_msg(const udp::endpoint& peer_addr, const char* pstr, size_t len, bool can_overflow);
	bool safe_send_native_msg(const udp::endpoint& peer_addr, const char* const pstr[], const size_t len[], size_t num, bool can_overflow);
同上，只是以native为true调用i_packer::pack_msg接口。

注，以上12个函数都还有一个重载版本，不需要提供peer_addr，但必须在之前调用过set_peer_addr函数。
以上所有函数都有同步发送版本，请参考tcp::socket_base。

protected:
	void first_init(Matrix* matrix_ = nullptr);
构造时调用，仅仅是为了节省代码量而已，因为我们有两个构造函数都将调用它。

	Matrix* get_matrix();
	const Matrix* get_matrix() const;

	virtual bool do_start();
创建套接字，绑定到指定端口，然后调用父类的同名函数。

	virtual void on_recv_error(const error_code& ec);
接收消息出错时回调。

	virtual bool on_heartbeat_error();
心跳包超时时架设。

#ifdef ASCS_SYNC_SEND
	virtual void on_close();
#endif
通知所有同步发送结束，然后调用父类同名函数。

private:
#ifndef ASCS_PASSIVE_RECV
	virtual void recv_msg();
post一个异步调用到do_recv_msg()。
#endif

	virtual void send_msg();
post一个异步调用到do_send_msg()。

	void shutdown();
调用父类close函数。

	void do_recv_msg();
调用async_receive_from()。

	void recv_handler(const error_code& ec, size_t bytes_transferred);
收到数据后由asio回调。

	bool do_send_msg(bool in_strand);
调用async_send_to()。

	void send_handler(const error_code& ec, size_t bytes_transferred);
成功发送消息（写入底层套接字）后由asio回调。

	bool set_addr(boost::asio::ip::udp::endpoint& endpoint, unsigned short port, const std::string& ip);
设置地址，内部使用。

private:
	using super::stat;
	using super::packer_;
	using super::temp_msg_can;

	using super::send_msg_buffer;
	using super::sending;

#ifdef ASCS_PASSIVE_RECV
	using super::reading;
#endif

	bool has_bound;
是否已经绑定到指定地址。

	typename super::in_msg last_send_msg;
	std::shared_ptr<i_unpacker<typename Unpacker::msg_type>> unpacker_;
	asio::ip::udp::endpoint local_addr;
	asio::ip::udp::endpoint temp_addr; //used when receiving messages
	asio::ip::udp::endpoint peer_addr;
异步接收udp消息时，asio需要一个endpoint，在整个异步接收过程中，这个endpoint必须有效，所以它是一个成员变量（temp_addr），
它只代表上一次接收udp消息时的对端地址，对于已经接收到的udp消息，对端地址保存在out_msg_type里面。
如果发送消息时不指定对端地址，则使用peer_addr。

	Matrix* matrix;
	asio::io_context::strand strand;
};

}} //namespace
