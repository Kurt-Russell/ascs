
namespace ascs
{

定时器类
template<typename Executor>
class timer : public Executor
{
public:
#ifdef ASCS_USE_STEADY_TIMER
	typedef asio::steady_timer timer_type;
#else
	typedef asio::system_timer timer_type;
#endif

	typedef unsigned char tid;
	static const tid TIMER_END = 0;
继承者的定时器ID必须从父类的TIMER_END开始，然后最好也定义一个自己的TIMER_END，如果你这个类可能会被继承的话。

	struct timer_info
	{
		enum timer_status : char {TIMER_CREATED, TIMER_STARTED, TIMER_CANCELED};

		tid id;
		unsigned char seq;
		timer_status status;
		unsigned interval_ms;
		timer_type timer;
		std::function<bool (tid)> call_back;
		在定时器到达后，call_back被回调，并根据返回值决定是否继续这个定时器（true即继续），同一个定时器，call_back的调用是顺序的。

		timer_info(tid id_, asio::io_context& io_context_);
		bool operator ==(const timer_info& other);
		bool operator ==(tid id_);
	};
定时器数据结构。

	typedef const timer_info timer_cinfo;

	timer(asio::io_context& io_context_);
	~timer();

	bool create_or_update_timer(tid id, unsigned interval, std::function<bool(tid)>&& call_back, bool start = false);
	bool create_or_update_timer(tid id, unsigned interval, const std::function<bool(tid)>& call_back, bool start = false);
如果定时器不存在则创建，如果已经存在则更新其interval和call_back，如果start为真，则马上开始定时器。

	bool change_timer_status(tid id, typename timer_info::timer_status status);
	bool change_timer_interval(tid id, size_t interval);

	bool change_timer_call_back(tid id, std::function<bool(tid)>&& call_back);
	bool change_timer_call_back(tid id, const std::function<bool(tid)>& call_back);
更新timer，注意操作同一个timer对象里面的同一个定时器是非线程安全的。

	bool set_timer(tid id, unsigned interval, std::function<bool(tid)>&& call_back);
	bool set_timer(tid id, unsigned interval, const std::function<bool(tid)>& call_back);
开启定时器。

	timer_info* find_timer(tid id);

	bool is_timer(tid id);
如果定时器已经开启，则返回真
	bool start_timer(tid id);
如果定时器已经开启，则先停止再重启它。
	void stop_timer(tid id);
	void stop_all_timer();
	void stop_all_timer(tid excepted_id);

	template<typename _Predicate> void do_something_to_all(const _Predicate& __pred);
对所有定时器做一个操作，操作由__pred来定，ascs库只是调用__pred()。

	template<typename _Predicate> void do_something_to_one(const _Predicate& __pred);
与do_something_to_all类似，只是当__pred()返回真时就不再继续循环处理后面的定时器了（如果你永远返回false，那就等于so_something_to_all），跟查找功能类似。

protected:
	void start_timer(timer_info& ti, unsigned interval_ms);
内部使用的helper函数，真正的开启定时器（timer_type::async_wait）。

	bool start_timer(timer_info& ti);
以ti.interval_ms调用上一个start_timer函数。

	void stop_timer(timer_info& ti);
内部使用的helper函数，真正的结束定时器（调用timer_type::cancel）。

private:
	typedef std::list<timer_info> container_type;
	container_type timer_can;
	std::mutex timer_can_mutex;

	using Executor::io_context_;
隐藏io_contex。
};

} //namespace
