
宏定义以及编译器版本，asio版本检查等。

#define ASCS_VER		10303	//[x]xyyzz -> [x]x.[y]y.[z]z
#define ASCS_VERSION	"1.3.3"

//configurations
#ifndef ASCS_SERVER_IP
#define ASCS_SERVER_IP			"127.0.0.1"
#endif
#ifndef ASCS_SERVER_PORT
#define ASCS_SERVER_PORT		5050
#endif
static_assert(ASCS_SERVER_PORT > 0, "server port must be bigger than zero.");
服务端和客户端共用。

//msg send and recv buffer's maximum size (list::size()), corresponding buffers are expanded dynamically, which means only allocate memory when needed.
#ifndef ASCS_MAX_MSG_NUM
#define ASCS_MAX_MSG_NUM		1024
#endif
static_assert(ASCS_MAX_MSG_NUM > 0, "message capacity must be bigger than zero.");
消息接收缓存和发送缓存最大存储消息数，采用了list容器，所以是用到多少分配多少。

//buffer (on stack) size used when writing logs.
#ifndef ASCS_UNIFIED_OUT_BUF_NUM
#define ASCS_UNIFIED_OUT_BUF_NUM	2048
#endif
输出日志时用到的缓存大小。

//use customized log system (you must provide unified_out::fatal_out/error_out/warning_out/info_out/debug_out)
//#define ASCS_CUSTOM_LOG
是否采用自定义日志输入系统，你必须提供自己的unified_out::fatal_out/error_out/warning_out/info_out/debug_out。

//don't write any logs.
//#define ASCS_NO_UNIFIED_OUT
是否禁止日志输出。

//if defined, service_pump will catch exceptions for asio::io_service::run(), and all function objects in asynchronous calls
//will be hooked by ascs::object, this can avoid the object been freed during asynchronous call.
//#define ASCS_ENHANCED_STABILITY
增加安全性，如果定义，将为asio::io_service::run()捕捉异常，捕捉到后，会回调ascs::service_pump::on_exception，如果返回true，
则再次调用asio::io_service::run。

//if defined, asio::steady_timer will be used in ascs::timer, otherwise, asio::system_timer will be used.
//#define ASCS_USE_STEADY_TIMER
如果定义，则定时器使用asio::steady_timer，否则使用asio::system_timer。

//after this duration, this socket can be freed from the heap or reused,
//you must define this macro as a value, not just define it, the value means the duration, unit is second.
//a value equal to zero will cause ascs to use a mechanism to guarantee 100% safety when reusing or freeing this socket,
//ascs will hook all async calls to avoid this socket to be reused or freed before all async calls finish
//or been interrupted (of course, this mechanism will slightly impact efficiency).
#ifndef ASCS_DELAY_CLOSE
#define ASCS_DELAY_CLOSE	0 //seconds, guarantee 100% safety when reusing or freeing this socket
#endif
static_assert(ASCS_DELAY_CLOSE >= 0, "delay close duration must be bigger than or equal to zero.");

//full statistic include time consumption, or only numerable informations will be gathered
//#define ASCS_FULL_STATISTIC

//after every msg sent, call ascs::socket::on_msg_send()
//#define ASCS_WANT_MSG_SEND_NOTIFY

//after sending buffer became empty, call ascs::socket::on_all_msg_send()
//#define ASCS_WANT_ALL_MSG_SEND_NOTIFY

//max number of objects object_pool can hold.
#ifndef ASCS_MAX_OBJECT_NUM
#define ASCS_MAX_OBJECT_NUM	4096
#endif
static_assert(ASCS_MAX_OBJECT_NUM > 0, "object capacity must be bigger than zero.");

//if defined, objects will never be freed, but remain in object_pool waiting for reuse.
//#define ASCS_REUSE_OBJECT

//this macro has the same effects as macro ASCS_REUSE_OBJECT (it will overwrite the latter), except:
//reuse will not happen when create new connections, but just happen when invoke i_server::restore_socket.
//you may ask, for what purpose we introduced this feature?
//consider following situation:
//if a specific link is down, and the client has reconnected to the server, on the server side, how does the new server_socket_base
//restore all user data (because you don't want to nor need to reestablish them) and keep its id?
//before this feature been introduced, it's almost impossible.
//according to above explanation, we know that:
//1. like object pool, only objects in invalid_object_can can be restored;
//2. client need to inform server_socket_base the former id (or something else which can be used to calculate the former id
//   on the server side) after reconnected to the server;
//3. this feature needs user's support (send former id to server side on client side, invoke i_server::restore_socket in server_socket_base);
//4. do not define this macro on client side nor for UDP.
//#define ASCS_RESTORE_OBJECT

//define ASCS_REUSE_OBJECT or ASCS_RESTORE_OBJECT macro will enable object pool, all objects in invalid_object_can will
// never be freed, but kept for reuse, otherwise, object_pool will free objects in invalid_object_can automatically and periodically,
//ASCS_FREE_OBJECT_INTERVAL means the interval, unit is second, see invalid_object_can in object_pool class for more details.
#if !defined(ASCS_REUSE_OBJECT) && !defined(ASCS_RESTORE_OBJECT)
	#ifndef ASCS_FREE_OBJECT_INTERVAL
	#define ASCS_FREE_OBJECT_INTERVAL	60 //seconds
	#elif ASCS_FREE_OBJECT_INTERVAL <= 0
		#error free object interval must be bigger than zero.
	#endif
#endif
如果未开启对象池，将自动开启一个定时器，用于定时释放（从内存中删除）失效的对象（失效对象是指obsoleted()返回true,
智能指针只有一个引用并且无任何异步调用的对象。

//define ASCS_CLEAR_OBJECT_INTERVAL macro to let object_pool to invoke clear_obsoleted_object() automatically and periodically
//this feature may affect performance with huge number of objects, so re-write tcp::server_socket_base::on_recv_error and invoke object_pool::del_object()
//is recommended for long-term connection system, but for short-term connection system, you are recommended to open this feature.
//you must define this macro as a value, not just define it, the value means the interval, unit is second
//#define ASCS_CLEAR_OBJECT_INTERVAL		60 //seconds
#if defined(ASCS_CLEAR_OBJECT_INTERVAL) && ASCS_CLEAR_OBJECT_INTERVAL <= 0
	#error clear object interval must be bigger than zero.
#endif
自动清除（从对象池移出到临时链表）失效对象，这个功能有什么用呢？
如果在连接断开时，你没有或者不想去从对象池中删除，那么可以让object_pool周期性的查找失效连接，
然后移出对象池，这样一次遍历可以操作多条连接，对于短连接效率可能会更高，对于长连接，建议每次连接断开时，调用
tcp::server_base::del_client()马上清除这条连接。用这个宏指定定时器间隔，单位为秒。

//IO thread number
//listening, msg sending and receiving, msg handling(on_msg_handle() and on_msg()), all timers(include user timers) and other asynchronous calls(ascs::object::post())
//will use these threads, so keep big enough, no empirical value I can suggest, you must try to find it out in your own environment
#ifndef ASCS_SERVICE_THREAD_NUM
#define ASCS_SERVICE_THREAD_NUM	8
#endif
static_assert(ASCS_SERVICE_THREAD_NUM > 0, "service thread number be bigger than zero.");
同时开启多少个线程执行asio::io_service::run函数。

//graceful shutdown must finish within this duration, otherwise, socket will be forcedly shut down.
#ifndef ASCS_GRACEFUL_SHUTDOWN_MAX_DURATION
#define ASCS_GRACEFUL_SHUTDOWN_MAX_DURATION	5 //seconds
#endif
static_assert(ASCS_GRACEFUL_SHUTDOWN_MAX_DURATION > 0, "graceful shutdown duration must be bigger than zero.");

//if connecting (or reconnecting) failed, delay how much milliseconds before reconnecting, negative value means stop reconnecting,
//you can also rewrite ascs::tcp::client_socket_base::prepare_reconnect(), and return a negative value.
#ifndef ASCS_RECONNECT_INTERVAL
#define ASCS_RECONNECT_INTERVAL	500 //millisecond(s)
#endif
异步连接，asio返回失败之后，暂停一定时间继续重试（即再次调用asnc_connect）。

//how many async_accept delivery concurrently
#ifndef ASCS_ASYNC_ACCEPT_NUM
#define ASCS_ASYNC_ACCEPT_NUM	16
#endif
static_assert(ASCS_ASYNC_ACCEPT_NUM > 0, "async accept number must be bigger than zero.");
同时投递多少个async_accept。

//in set_server_addr, if the IP is empty, ASCS_TCP_DEFAULT_IP_VERSION will define the IP version, or the IP version will be deduced by the IP address.
//asio::ip::tcp::v4() means ipv4 and asio::ip::tcp::v6() means ipv6.
#ifndef ASCS_TCP_DEFAULT_IP_VERSION
#define ASCS_TCP_DEFAULT_IP_VERSION asio::ip::tcp::v4()
#endif
#ifndef ASCS_UDP_DEFAULT_IP_VERSION
#define ASCS_UDP_DEFAULT_IP_VERSION asio::ip::udp::v4()
#endif
绑定地址时，在不指定ip的情况下，指定ip地址的版本（v4还是v6），如果指定了ip，则ip地址的版本可以从ip中推导出来。

//close port reuse
//#define ASCS_NOT_REUSE_ADDRESS

#ifndef ASCS_INPUT_QUEUE
#define ASCS_INPUT_QUEUE lock_queue
#endif
#ifndef ASCS_INPUT_CONTAINER
#define ASCS_INPUT_CONTAINER list
#endif
#ifndef ASCS_OUTPUT_QUEUE
#define ASCS_OUTPUT_QUEUE lock_queue
#endif
#ifndef ASCS_OUTPUT_CONTAINER
#define ASCS_OUTPUT_CONTAINER list
#endif
ascs默认提供了两种消息队列供你选择，一是普通的带锁消息队列，基于ascs::list加上std::mutex实现，二是无锁线程不安全队列，
也是基于ascs::list实现。
使用无锁线程不安全队列时，一定要仔细审查你的业务，并不是所有业务都可以使用无锁线程不安全队列的，具有用法请看demo。
队列及其内部所使用的容器都是可以通过宏或者模板参数来指定的，所以这就自然而然的支持了自定义队列（及容器），至于如何实现自定
义队列（及容器），可以参看ascs::non_lock_queue及ascs::lock_queue，需要支持两个模板参数。
容器需要实现一些特定的接口（队列需要调用），可以参看ascs::list，需要支持一个模板参数，至于确切的需要实现哪些接口，因不同
的队列而不同，最好的办法就是编译，让编译器告诉你缺少哪些接口，接口从名称上就可以看出其作用，非常清晰。

#ifndef ASCS_RECV_BUFFER_TYPE
	#if ASIO_VERSION >= 101100
	#define ASCS_RECV_BUFFER_TYPE asio::mutable_buffer
	#else
	#define ASCS_RECV_BUFFER_TYPE asio::mutable_buffers_1
	#endif
#endif
unpacker的prepare_next_recv返回的数据类型的定义。

#ifndef ASCS_HEARTBEAT_INTERVAL
#define ASCS_HEARTBEAT_INTERVAL	0 //second(s)
#endif
发送心跳包间隔，在此间隔中，如果有消息被发送，将不会发送心跳包，直到下一个间隔再发。心跳包通过调用打包器的pack_heartbeat函数得到。
如果想关闭心跳包，定义这个宏为0即可，此时你仍然可以以自己的逻辑来发送接收心跳包，并判断连接的有效性，只需要你调用check_heartbeat或者
start_heartbeat即可，前者检测（然后如果未超时的话，将发送一个心跳包）一次，后者定时检查。

#ifndef ASCS_HEARTBEAT_MAX_ABSENCE
#define ASCS_HEARTBEAT_MAX_ABSENCE	3 //times of ASCS_HEARTBEAT_INTERVAL
#endif
static_assert(ASCS_HEARTBEAT_MAX_ABSENCE > 0, "heartbeat absence must be bigger than zero.");
在ASCS_HEARTBEAT_INTERVAL * ASCS_HEARTBEAT_MAX_ABSENCE秒之内，如果没有收到任何数据，连接被认为是意外中断。

//#define ASCS_REUSE_SSL_STREAM
定义这个宏，ssl::server_socket_base和ssl::client_socket_base将支持重用。

//#define ASCS_AVOID_AUTO_STOP_SERVICE
在无任何异步IO可做的时候，让service_pump不自动退出。

//#define ASCS_DECREASE_THREAD_AT_RUNTIME
是否支持运行时减少service线程，增加线程一直都可以，不管是否定义了该宏。

#ifndef ASCS_MSG_RESUMING_INTERVAL
#define ASCS_MSG_RESUMING_INTERVAL	50 //milliseconds
#endif
static_assert(ASCS_MSG_RESUMING_INTERVAL >= 0, "the interval of msg resuming must be bigger than or equal to zero.");
当接收缓存满的时候，消息接收将暂停，然后以该宏为间隔检测接收缓存的可用性，一但变得可用，将恢复消息接收，
该参数也可以通过ascs::socket::msg_resuming_interval(size_t)在运行时修改。

#ifndef ASCS_MSG_HANDLING_INTERVAL
#define ASCS_MSG_HANDLING_INTERVAL	50 //milliseconds
#endif
static_assert(ASCS_MSG_HANDLING_INTERVAL >= 0, "the interval of msg handling must be bigger than or equal to zero.");
当on_msg_handle返回false或者0（若定义了ASCS_DISPATCH_BATCH_MSG）时，消息派发将暂停，然后以该宏为间隔重新派发，直到返回true或者大于0之后，派发将不再暂停，
该参数也可以通过ascs::socket::msg_handling_interval(size_t)在运行时修改。

//#define ASCS_PASSIVE_RECV
如果你想在运行时动态修改解包器，那就必须要定义该宏，这会让ascs在收到至少一个消息之后，不会继续async_read，用户必须显示调用recv_msg来触发下一次async_read，
在这之前替换解包器才是安全的，所以最好的时机是在on_msg_handle里，且在派发最后一个消息时，切换解包器，可以看file_client里面有演示。

//#define ASCS_DISPATCH_BATCH_MSG
是否批量派发消息，如果你的消息处理很简单（比如echo server，或者你有自己的消息派发逻辑，在on_msg_handle里面只需要将消息push到另外一个队列），推荐定义该宏。

//#define ASCS_ALIGNED_TIMER
对齐定时器，比如一个定时器在xx:xx:xx开启，interval 是 10 秒，回调将会在 xx:xx:xx + 10 被调用，假设回调在 xx:xx:xx + 11 返回，那么下一次定时器的间隔将被
临时地改为9秒以保证下次回调发生在 xx:xx:xx + 20 ，如果不定义该宏，那么下次回调将发生在 xx:xx:xx + 21 。

//#define ASCS_SYNC_SEND
#ifdef ASCS_SYNC_SEND
static_assert(ASIO_HAS_STD_FUTURE == 1, "sync message sending needs std::future.");
#endif
//#define ASCS_SYNC_RECV
是否支持同步数据收发，同步发需要std::future支持。

//#define ASCS_SYNC_DISPATCH
是否支持同步派发消息，派发的次序为 sync_recv_msg（如果有调用的话），on_msg（如果定义该宏的话）和 on_msg_handle。

//configurations
