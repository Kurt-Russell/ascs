
包括了公共函数、类、接口、宏等东西。

1. 宏
ASCS_HAS_STD_SHARED_MUTEX， 如果你的编译器报shared_mutex重复定义，请定义该宏；
ASCS_SERVER_IP， 默认IP，可以通过这个宏修改，也可以直接在参数中修改；
ASCS_SERVER_PORT， 默认端口，可以通过这个宏修改，也可以直接在参数中修改；
ASCS_MAX_MSG_NUM， socket中最多能缓存的消息条数，由于采用的是list，所以内存用到多少分配多少，注意发送和接收缓存都可以达到这个大小，而不共享这个大小。
ASCS_SF， 打印size_t时用的格式符，vc和gcc不一样。
ASCS_THIS， 访问父类的函数或者成员时使用，解决vc崩溃问题（部分版本）。
ASCS_UNIFIED_OUT_BUF_NUM， log打印时缓存大小。
ASCS_NO_UNIFIED_OUT， 关闭log打印。
ASCS_CUSTOM_LOG， 定义之后，用户必须提供自己的log打印函数（unified_out::fatal_out/error_out/warning_out/info_out/debug_out）。

2. 接口
i_server:
用于在server_socket_base中调用server_base，server_socket_base使用，server_base实现，
如果想增加更多的功能，则继承自i_server实现自己的接口，继承自server_base并实现这个新接口，最后继承自server_socket_base以使用这个新接口。
这里只解释一下del_client接口：
关闭一个连接时，server_socket_base调用这个方法，i_server的实现者（server就是一个i_server的实现者）一般来说应该把这个连接从自己的
客户端对象池里面删除，调用这个方法的最佳时期是在on_recv_error里面。
注意，client_ptr参数看起来是一个timer，其实它的类型是server_base中的Socket模板参数，用timer完全是为了不让i_server带一个类似于
Socket的模板参数，带上之后会有模板参数的循环依赖的问题，如果哪位同仁可以解决此问题，麻烦告诉我一声。
i_server的实现者在使用client_ptr参数之前，会转换成Socket类型指针，请看server_base的实现。

i_buffer：
如果想要在运行时替换打包解包器，你的缓存必须实现这个接口，然后以auto_buffer或者shared_buffer作为消息类型。

i_packer：
所有打包器必须实现这个接口，tcp和udp共用。每次发送消息的时候，只要不是native的消息，都会调用pack_msg来打包。

tcp::i_unpacker:
tcp解包器必须实现这个接口。每次开始接收消息之后，会调用prepare_next_recv以得到一个缓存，当收到一些数据之后，
asio会调用completion_condition，如果返回0，说明已经成功的接收到了至少一个消息，于是ascs会接着调用parse_msg
来解析消息，解析完了之后再次调用prepare_next_recv进入一个新的循环。注意，解析完消息之后，缓存里面可能还剩余部分数据（消息被分包），
第二次prepare_next_recv返回的缓存，不能覆盖未解析完的数据（如果采用固定缓存的解包器，通常的做法是把未解析完的数据移动到缓存最前面），否则数据会被覆盖。

udp::i_unpacker:
udp解包器必须实现这个接口。

3. 类
auto_buffer：
如果想要运行时替换打包解包器，则打包解包器必须以auto_buffer或者shared_buffer作为消息类型（你写个类似的也可，但没有必要，如果需要更多的功能可以用继承）。
这个类是不允许被复制的，用户只负责分配内存。

shared_buffer：
同auto_buffer，除了允许被复制。

dummy_packer：
这个类只提供消息类型的定义，不做真正的打包，所以用户必须以native方式发送消息，或者用direct_send_msg等发送消息。

udp::udp_msg：
udp消息，其实就是在tcp消息上加了一个对端地址。

log_formater：
log打印函数，只是打印到屏幕，如果需要更详细的功能需要自己实现。

unified_out：
调用log_formater打印log，如果定义ASCS_NO_UNIFIED_OUT，所有log打印函数将变成空函数，什么也不做。

4. 函数
do_something_to_all：
对容器（不得是类map容器，比如map，unordered_map等）中的所有对象执行一个动作，动作由一个函数对象（std::function）决定。
可以选择带锁和不带锁，如果带锁，加的是共享锁，请注意。

do_something_to_one：
同do_something_to_all，如果对某一个对象执行的动作返回true，则跳过所有剩下的对象，如果全部对象都返回false，则等于do_something_to_all，但效率上稍慢。

splice_helper：
拼接两个list，并且将结果（list::size）限制在一个指定的大小之内。
